package com.nus.fileupload.service;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.nus.fileupload.entities.ProjectMonthlyPlcc;
import com.nus.fileupload.loader.DataLoader;
import com.nus.fileupload.model.FileUploadPayload;
import com.nus.fileupload.repo.ProjectMonthlyPlccRepo;
import com.nus.pvt.master.entities.ProjectCodeMstr;

import jakarta.servlet.http.HttpServletResponse;

/**
 * @Author: SanjeevKumar<br>
 * @Date: 27-Jan-2025<br>
 * @Time: 9:49:35 pm<br>
 * @Objective: <br>
 */
public class ProjectCodeMstrUploadServiceImpl implements ProjectCodeMstrUploadService{

private final Logger logger = LoggerFactory.getLogger(ProjectMonthlyPlccServiceImpl.class);
	
	@Autowired
	ProjectCodeMstrRepo ProjectCodeMstrRepo;
	
	@Autowired 
    DataLoader dataLoader;
	
	@Override
	public List<ProjectCodeMstr> readExcel(FileUploadPayload fileUploadPayload) throws IOException {
		
		
		int totalRevenueAmountCellNo=14;// Double => Checked	
		int marginAmountCellNo =28;// Double => Checked
		int fteCellNo = 7; // Integer
		int projectCodeCellNo= 0; // String => Checked

		List<ProjectCodeMstr> projectCodeMstrList = new ArrayList<ProjectCodeMstr>();
		Workbook workbook = null;
		String fileName = fileUploadPayload.getFile().getOriginalFilename();

		if (fileName.substring(fileName.length() - 5, fileName.length()).equals(".xlsx")) {
			InputStream excelInputStream = fileUploadPayload.getFile().getInputStream();
			try {
				workbook = WorkbookFactory.create(excelInputStream);
				logger.info("Number of sheets: " + workbook.getNumberOfSheets());
				workbook.forEach(sheet -> {
					logger.info("Title of sheet => " + sheet.getSheetName());					
					int index = 0;
					ProjectCodeMstr projectCodeMstr;				
					for (Row row : sheet) {// Now, start reading each cell one by one in a selected row.
						if (index++ == 0)
							continue;
						projectCodeMstr = new ProjectCodeMstr(fileUploadPayload.getUserId(),"Y" );
						
						if (row.getCell(totalRevenueAmountCellNo) != null && row.getCell(totalRevenueAmountCellNo).getCellType() == CellType.STRING) {							
							projectCodeMstr.setProjectCode(row.getCell(totalRevenueAmountCellNo).getStringCellValue())
						}
						
						if (row.getCell(marginAmountCellNo) != null && row.getCell(marginAmountCellNo).getCellType() == CellType.STRING) {
							projectCodeMstr.setProjectName(row.getCell(marginAmountCellNo).getStringCellValue());							
						}		
						projectCodeMstrList.add(projectCodeMstr);
					}//End of for loop
				});
			} catch (EncryptedDocumentException | IOException e) {
				logger.error(e.getMessage(), e);
			} finally {
				try {
					if (workbook != null)
						workbook.close();
					if (excelInputStream != null)
						excelInputStream.close();
				} catch (IOException e) {
					logger.error(e.getMessage(), e);
				}
			}
		}
		return projectMonthlyPlccList;
	}

	@Override
	public List<ProjectMonthlyPlcc> saveExcel(List<ProjectMonthlyPlcc> projectMonthlyPlccList) {
		List<ProjectMonthlyPlcc> savedProjectMonthlyPlcc = null;
		try {
			savedProjectMonthlyPlcc = projectMonthlyPlccRepo.saveAll(projectMonthlyPlccList);
		}catch(Exception ex) {ex.printStackTrace();}
		return savedProjectMonthlyPlcc;
	}

	@Override
	public void generateExcel(HttpServletResponse response, String fileName) {
		// TODO Auto-generated method stub
		
	}


}
