package com.nus.pvt.master.ctrl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.nus.base.ctrl.ApexBaseCtrl;
import com.nus.exception.ResourceNotFoundException;
import com.nus.pvt.master.model.UserTypeModel;
import com.nus.pvt.master.service.UserTypeService;
import com.nus.sec.entities.UserType;

/**
 * @Author: SanjeevKumar<br>
 * @Date: 17-Jan-2025<br>
 * @Time: 4:11:14 pm<br>
 * @Objective: <br>
 */
@RestController
@RequestMapping("/mstr/v1")
public class UserTypeController extends ApexBaseCtrl {
	
	@Autowired
	UserTypeService userTypeService;
	
	@PostMapping(value = "/usertypes",produces="application/json",consumes = "application/json")
	@PreAuthorize("hasAnyAuthority('ROLE_SUPER','ROLE_ADMIN')")
	public ResponseEntity<Object> addUserType(@RequestBody UserTypeModel userTypeModel) {		
		UserType userType = userTypeService.addUserType(userTypeModel);
		if(userType!=null) {
			apiReq=makeApiMetaData();
			apiReq.setPayLoad(userTypeModel);
			//Return response in a pre-defined format	       	
			apiResponse=makeSuccessResponse(userType,apiReq);		
			return ResponseEntity.ok().body(apiResponse);
		}else {
			throw new ResourceNotFoundException("No UserType is added.");
		}
	}

	@GetMapping(value = "/usertypes",produces="application/json")
	@PreAuthorize("hasAnyAuthority('ROLE_SUPER','ROLE_ADMIN')")
	public ResponseEntity<Object> getAllUserTypes() {		
		List<UserType> userTypeList = userTypeService.getAllUserTypes();
		if(userTypeList!=null) {
			apiReq=makeApiMetaData();			
			//Return response in a pre-defined format	       	
			apiResponse=makeSuccessResponse(userTypeList,apiReq);		
			return ResponseEntity.ok().body(apiResponse);
		}else {			
			throw new ResourceNotFoundException("No UserType is yet defined!");
		}
	}

	@GetMapping(value = "/usertypes/{id}",produces="application/json")
	@PreAuthorize("hasAnyAuthority('ROLE_SUPER','ROLE_ADMIN')")
	public ResponseEntity<Object> getUserTypeById(@PathVariable("id") Integer id) {
		UserType UserType = userTypeService.getUserTypeByRecordId(id);
		if(UserType!=null) {
			apiReq=makeApiMetaData();
			apiReq.setPayLoad(id);
			//Return response in a pre-defined format	       	
			apiResponse=makeSuccessResponse(UserType,apiReq);
			return ResponseEntity.ok().body(apiResponse);
		}else {
			throw new ResourceNotFoundException("No UserType with id("+id+") is found.");
		} 
	}

	@DeleteMapping(value = "/usertypes/{id}",produces="application/json")
	@PreAuthorize("hasAnyAuthority('ROLE_SUPER','ROLE_ADMIN')")
	public ResponseEntity<Object> deleteUserTypeById(@PathVariable("id") Integer id) {
		boolean isDeleted = userTypeService.deleteUserTypeByRecordId(id);
		if(isDeleted) {
			apiReq=makeApiMetaData();
			apiReq.setPayLoad(id);
			//Return response in a pre-defined format	       	
			apiResponse=makeSuccessResponse(true,apiReq);
			return ResponseEntity.ok().body(apiResponse);
		}else {
			throw new ResourceNotFoundException("No UserType with id("+id+") is found.");
		}
	}

	@PutMapping(value = "/usertypes",produces="application/json",consumes = "application/json")
	@PreAuthorize("hasAnyAuthority('ROLE_SUPER','ROLE_ADMIN')")
	public ResponseEntity<Object> updateUserType(@RequestBody UserTypeModel UserTypeModel) {		
		UserType UserType = userTypeService.updateUserType(UserTypeModel);
		if(UserType!=null) {
			apiReq=makeApiMetaData();
			apiReq.setPayLoad(UserTypeModel);
			//Return response in a pre-defined format	       	
			apiResponse=makeSuccessResponse(UserType,apiReq);
			return ResponseEntity.ok().body(apiResponse);
		}else {
			throw new ResourceNotFoundException("No UserType with id("+UserTypeModel.getId()+") is found.");
		} 
	}
	
}
