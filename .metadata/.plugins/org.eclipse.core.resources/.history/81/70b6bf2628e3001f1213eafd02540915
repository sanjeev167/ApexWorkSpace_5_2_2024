package com.nus.pvt.master.service;

import java.sql.SQLException;
import java.util.List;
import java.util.Optional;

import org.hibernate.exception.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Service;

import com.nus.base.service.UserLoginBaseService;
import com.nus.pvt.master.entities.ProjectCodeMstr;
import com.nus.pvt.master.model.ProjectCodeMstrModel;
import com.nus.pvt.master.repo.ProjectCodeMstrRepo;

import jakarta.persistence.PersistenceException;

/**
 * @Author: SanjeevKumar<br>
 * @Date: 17-Jan-2025<br>
 * @Time: 4:33:15 pm<br>
 * @Objective: <br>
 */
@Service
public class ProjectCodeMstrServiceImpl extends UserLoginBaseService implements ProjectCodeMstrService {

	@Autowired
	ProjectCodeMstrRepo projectCodeMstrRepo;
	
	@Override
	public ProjectCodeMstr addProjectCodeMstr(ProjectCodeMstrModel projectCodeMstrModel) throws PersistenceException{
		ProjectCodeMstr savedProjectCodeMstrEntity = null;
		try {
			ProjectCodeMstr projectCodeMstrEntity = new ProjectCodeMstr();
			projectCodeMstrEntity.setProjectCode(projectCodeMstrModel.getProjectCode());
			projectCodeMstrEntity.setProjectName(projectCodeMstrModel.getProjectName());
			projectCodeMstrEntity.setCreatedOn(currentDate);
			projectCodeMstrEntity.setCreatedBy(getCurrentLoginUserId());
			projectCodeMstrEntity.setActiveC("Y");
			savedProjectCodeMstrEntity = projectCodeMstrRepo.save(projectCodeMstrEntity);
		} 
		catch (PersistenceException ex) {
			throw ex;
		}
		catch (Exception ex) {System.out.println("Pagal");
			ex.printStackTrace();
		}
		return savedProjectCodeMstrEntity;
	}

	@Override
	public ProjectCodeMstr updateProjectCodeMstr(ProjectCodeMstrModel projectCodeMstrModel) {
		ProjectCodeMstr projectCodeMstrEntityToBeUpdated = null;
		try {
			Optional<ProjectCodeMstr> projectCodeMstrEntityWrapper = projectCodeMstrRepo.findById(projectCodeMstrModel.getId());
			if (projectCodeMstrEntityWrapper.isPresent()) {
				projectCodeMstrEntityToBeUpdated = projectCodeMstrEntityWrapper.get();
				projectCodeMstrEntityToBeUpdated.setProjectCode(projectCodeMstrModel.getProjectCode());	
				projectCodeMstrEntityToBeUpdated.setProjectName(projectCodeMstrModel.getProjectName());
				projectCodeMstrEntityToBeUpdated.setModifiedOn(currentDate);
				projectCodeMstrEntityToBeUpdated.setModifiedBy(getCurrentLoginUserId());				
				projectCodeMstrRepo.save(projectCodeMstrEntityToBeUpdated);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return projectCodeMstrEntityToBeUpdated;
	}

	@Override
	public boolean deleteProjectCodeMstrByRecordId(Integer recordId) {
		boolean isRecordDeleted = true;
		try {
			projectCodeMstrRepo.deleteById(recordId);
		} catch (Exception ex) {
			ex.printStackTrace();
			isRecordDeleted = false;
		}
		return isRecordDeleted;
	}

	@Override
	public ProjectCodeMstr getProjectCodeMstrByRecordId(Integer recordId) {
		ProjectCodeMstr projectCodeMstrEntityFetched = null;
		try {
			Optional<ProjectCodeMstr> projectCodeMstrEntityWrapper = projectCodeMstrRepo.findById(recordId);
			if (projectCodeMstrEntityWrapper.isPresent())
				projectCodeMstrEntityFetched = projectCodeMstrEntityWrapper.get();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return projectCodeMstrEntityFetched;
	}

	@Override
	public List<ProjectCodeMstr> getAllProjectCodeMstrs() {
		List<ProjectCodeMstr> projectCodeMstrList = null;
		try {
			projectCodeMstrList = projectCodeMstrRepo.findAllByActiveC("Y");
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return projectCodeMstrList;
	}
	
}
