package com.nus.fileupload.service;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.nus.base.service.UserLoginBaseService;
import com.nus.exception.DataIntegrityViolationException;
import com.nus.fileupload.entities.ProjectMonthlyResourceUtilization;
import com.nus.fileupload.loader.DataLoader;
import com.nus.pvt.admin.entities.AssignProjectToPm;
import com.nus.pvt.admin.model.AssignProjectToPmModel;
import com.nus.pvt.master.entities.ProjectCodeMstr;

import jakarta.servlet.http.HttpServletResponse;

/**
 * @Author: SanjeevKumar<br>
 * @Date: 08-Feb-2025<br>
 * @Time: 12:10:00 am<br>
 * @Objective: These have been written temporarily. Once the front-end is
 *             developed, it will be removed.<br>
 */
public class UploadAssignedProjectToPmServiceImpl extends UserLoginBaseService
		implements UploadAssignedProjectToPmService {

	@Autowired
	DataLoader dataLoader;

	@Override
	public List<AssignProjectToPm> readExcel(File file, String date) throws IOException {
		int billedDaysCellValue = 7;// Integer => Checked
		int availableDaysCellValue = 6;//Integer => Checked		
		int projectCodeCellNo = 4;//String		
		
		List<ProjectMonthlyResourceUtilization> monthlyResourceUtilizationListReadFromExcel = new ArrayList<>();
		Workbook workbook = null;
		String fileName = fileUploadPayload.getFile().getOriginalFilename();

		if (fileName.substring(fileName.length() - 5, fileName.length()).equals(".xlsx")) {
			InputStream excelInputStream = fileUploadPayload.getFile().getInputStream();
			try {
				workbook = WorkbookFactory.create(excelInputStream);
				logger.info("Number of sheets: " + workbook.getNumberOfSheets());
				workbook.forEach(sheet -> {
					logger.info("Title of sheet => " + sheet.getSheetName());					
					int index = 0;
					ProjectCodeMstr projectCodeMstr; ProjectMonthlyResourceUtilization projectMonthlyResourceUtilization;					
					for (Row row : sheet) {// Now, start reading each cell one by one in a selected row.
						if (index++ == 0)
							continue;
						projectMonthlyResourceUtilization = new ProjectMonthlyResourceUtilization(fileUploadPayload.getMonth(), fileUploadPayload.getYear(), getCurrentLoginUserId(),currentDate,"Y" );
						
						if (row.getCell(billedDaysCellValue) != null && row.getCell(billedDaysCellValue).getCellType() == CellType.NUMERIC) {
							projectMonthlyResourceUtilization.setBilledDays((int) row.getCell(billedDaysCellValue).getNumericCellValue());
						}
						
						if (row.getCell(availableDaysCellValue) != null && row.getCell(availableDaysCellValue).getCellType() == CellType.NUMERIC) {
							projectMonthlyResourceUtilization.setAvailableDays((int) row.getCell(availableDaysCellValue).getNumericCellValue());
						}				
						
						if (row.getCell(projectCodeCellNo) != null && row.getCell(projectCodeCellNo).getCellType() == CellType.STRING) {
							projectCodeMstr =dataLoader.getProjectCodeMstrMap().get(row.getCell(projectCodeCellNo).getStringCellValue().trim());	
							//System.out.println("Project Code =>"+row.getCell(projectCodeCellNo).getStringCellValue());							
							projectMonthlyResourceUtilization.setProjectCodeId(projectCodeMstr.getId());
						}					
						
						monthlyResourceUtilizationListReadFromExcel.add(projectMonthlyResourceUtilization);
					}//End of for loop
				});
			} catch (EncryptedDocumentException | IOException e) {
				logger.error(e.getMessage(), e);
			} finally {
				try {
					if (workbook != null)
						workbook.close();
					if (excelInputStream != null)
						excelInputStream.close();
				} catch (IOException e) {
					logger.error(e.getMessage(), e);
				}
			}
		}
		return monthlyResourceUtilizationListReadFromExcel;
	}

	@Override
	public List<AssignProjectToPmModel> saveExcel(List<AssignProjectToPm> assignProjectToPmListReadFromExcel)
			throws DataIntegrityViolationException, IOException, Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void generateExcel(HttpServletResponse response, String fileName) throws Exception {
		// TODO Auto-generated method stub

	}
}
