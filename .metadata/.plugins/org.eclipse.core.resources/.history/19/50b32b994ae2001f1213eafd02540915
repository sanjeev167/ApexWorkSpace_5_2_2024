package com.nus.pvt.master.ctrl;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.nus.base.ctrl.ApexBaseCtrl;
import com.nus.exception.ResourceNotFoundException;
import com.nus.pvt.master.model.ProjectVerticalMstrModel;
import com.nus.pvt.master.service.ProjectVerticalMstrService;
/**
 * @Author: SanjeevKumar<br>
 * @Date: 17-Jan-2025<br>
 * @Time: 4:13:57 pm<br>
 * @Objective: <br>
 */
@RestController
public class ProjectVerticalMstrController extends ApexBaseCtrl {

	private final Logger logger = LoggerFactory.getLogger(ProjectVerticalMstrController.class);
	
	@Autowired
	ProjectVerticalMstrService projectVerticalMstrService;
    
	@PostMapping(value = "/verticals",produces="application/json",consumes = "application/json")
	@PreAuthorize("hasAnyAuthority('ROLE_SUPER','ROLE_ADMIN')")
	public ResponseEntity<Object> addProjectVerticalMstr(@RequestBody ProjectVerticalMstrModel ProjectVerticalMstrModel) {		
		ProjectVerticalMstr ProjectVerticalMstr = ProjectVerticalMstrService.addProjectVerticalMstr(ProjectVerticalMstrModel);
		if(ProjectVerticalMstr!=null) {
			apiReq=makeApiMetaData();
			apiReq.setPayLoad(ProjectVerticalMstrModel);
			//Return response in a pre-defined format	       	
			apiResponse=makeSuccessResponse(ProjectVerticalMstr,apiReq);		
			return ResponseEntity.ok().body(apiResponse);
		}else {
			throw new ResourceNotFoundException("No ProjectVerticalMstr is added.");
		}
	}

	@GetMapping(value = "/verticals",produces="application/json")
	@PreAuthorize("hasAnyAuthority('ROLE_SUPER','ROLE_ADMIN')")
	public ResponseEntity<Object> getAllProjectVerticalMstrs() {		
		List<ProjectVerticalMstr> ProjectVerticalMstrList = ProjectVerticalMstrService.getAllProjectVerticalMstrs();
		if(ProjectVerticalMstrList!=null) {
			apiReq=makeApiMetaData();			
			//Return response in a pre-defined format	       	
			apiResponse=makeSuccessResponse(ProjectVerticalMstrList,apiReq);		
			return ResponseEntity.ok().body(apiResponse);
		}else {			
			throw new ResourceNotFoundException("No ProjectVerticalMstr is yet defined!");
		}
	}

	@GetMapping(value = "/verticals/{id}",produces="application/json")
	@PreAuthorize("hasAnyAuthority('ROLE_SUPER','ROLE_ADMIN')")
	public ResponseEntity<Object> getProjectVerticalMstrById(@PathVariable("id") Integer id) {
		ProjectVerticalMstr ProjectVerticalMstr = ProjectVerticalMstrService.getProjectVerticalMstrByRecordId(id);
		if(ProjectVerticalMstr!=null) {
			apiReq=makeApiMetaData();
			apiReq.setPayLoad(id);
			//Return response in a pre-defined format	       	
			apiResponse=makeSuccessResponse(ProjectVerticalMstr,apiReq);
			return ResponseEntity.ok().body(apiResponse);
		}else {
			throw new ResourceNotFoundException("No ProjectVerticalMstr with id("+id+") is found.");
		} 
	}

	@DeleteMapping(value = "/verticals/{id}",produces="application/json")
	@PreAuthorize("hasAnyAuthority('ROLE_SUPER','ROLE_ADMIN')")
	public ResponseEntity<Object> deleteProjectVerticalMstrById(@PathVariable("id") Integer id) {
		boolean isDeleted = ProjectVerticalMstrService.deleteProjectVerticalMstrByRecordId(id);
		if(isDeleted) {
			apiReq=makeApiMetaData();
			apiReq.setPayLoad(id);
			//Return response in a pre-defined format	       	
			apiResponse=makeSuccessResponse(true,apiReq);
			return ResponseEntity.ok().body(apiResponse);
		}else {
			throw new ResourceNotFoundException("No ProjectVerticalMstr with id("+id+") is found.");
		}
	}

	@PutMapping(value = "/verticals",produces="application/json",consumes = "application/json")
	@PreAuthorize("hasAnyAuthority('ROLE_SUPER','ROLE_ADMIN')")
	public ResponseEntity<Object> updateProjectVerticalMstr(@RequestBody ProjectVerticalMstrModel ProjectVerticalMstrModel) {		
		ProjectVerticalMstr ProjectVerticalMstr = ProjectVerticalMstrService.updateProjectVerticalMstr(ProjectVerticalMstrModel);
		if(ProjectVerticalMstr!=null) {
			apiReq=makeApiMetaData();
			apiReq.setPayLoad(ProjectVerticalMstrModel);
			//Return response in a pre-defined format	       	
			apiResponse=makeSuccessResponse(ProjectVerticalMstr,apiReq);
			return ResponseEntity.ok().body(apiResponse);
		}else {
			throw new ResourceNotFoundException("No ProjectVerticalMstr with id("+ProjectVerticalMstrModel.getId()+") is found.");
		} 
	}
	
	
}
