package com.nus.fileupload.service;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.nus.exception.DataIntegrityViolationException;
import com.nus.fileupload.entities.CustomerSatisfaction;
import com.nus.fileupload.entities.FileReference;
import com.nus.fileupload.entities.FileType;
import com.nus.fileupload.entities.ProjectMonthlyResourceUtilization;
import com.nus.fileupload.loader.DataLoader;
import com.nus.fileupload.model.FileUploadPayload;
import com.nus.fileupload.repo.HcustomerSatisfactionRepo;
import com.nus.fileupload.repo.MonthlyCustomerSatisfactionRepo;
import com.nus.pvt.master.entities.ProjectCodeMstr;

import jakarta.servlet.http.HttpServletResponse;

/**
 * @Author:SanjeevKumar<br>
 * @Date:24-Jan-2025<br>
 * @Time:10:49:11 pm<br>
 * @Objective: <br>
 */
@Service
public class MonthlyCustomerSatisfactionServiceImpl implements MonthlyCustomerSatisfactionService{

	private final Logger logger = LoggerFactory.getLogger(MonthlyCustomerSatisfactionServiceImpl.class);
	@Autowired
	MonthlyCustomerSatisfactionRepo monthlyCustomerSatisfactionRepo;
	
	@Autowired
	HcustomerSatisfactionRepo hcustomerSatisfactionRepo;	
	
	@Autowired 
    DataLoader dataLoader;

	@Autowired
	FileStorageService fileStorageService;
	
	@Override
	public List<CustomerSatisfaction> readExcel(FileUploadPayload fileUploadPayload) throws IOException {		
		//checked		
		        int projectCodeCellNo = 2;//String
				int csatDueDateCellNo = 12;//Date		
				int csatClientMailInitiatedCellNo = 13;//Date
				int csatReceivedDateCellNo = 14;//Date		
				int ratingCellNo = 15;//Double
				

				List<CustomerSatisfaction> customerSatisfactionListReadFromExcel = new ArrayList<CustomerSatisfaction>();
				Workbook workbook = null;
				String fileName = fileUploadPayload.getFile().getOriginalFilename();	
				
				if (fileName.substring(fileName.length() - 5, fileName.length()).equals(".xlsx")) {
					InputStream excelInputStream = fileUploadPayload.getFile().getInputStream();
					try {
						workbook = WorkbookFactory.create(excelInputStream);
						logger.info("Number of sheets: " + workbook.getNumberOfSheets());
						
						workbook.forEach(sheet -> {
							logger.info("Title of sheet => " + sheet.getSheetName());	
							//DataFormatter dataFormatter = new DataFormatter();
							Cell dateCell;
							int index = 0;
							ProjectCodeMstr projectCodeMstr;CustomerSatisfaction customerSatisfaction;
							for (Row row : sheet) {// Now, start reading each cell one by one in a selected row.
								if (index++ == 0)
									continue;
								customerSatisfaction = new CustomerSatisfaction(fileUploadPayload.getMonth(), fileUploadPayload.getYear(), fileUploadPayload.getUserId(),"Y" );
															
								if (row.getCell(projectCodeCellNo) != null && row.getCell(projectCodeCellNo).getCellType() == CellType.STRING) {
									projectCodeMstr =dataLoader.getProjectCodeMstrMap().get(row.getCell(projectCodeCellNo).getStringCellValue().trim());
									//System.out.println("Code = "+row.getCell(projectCodeCellNo).getStringCellValue());
									customerSatisfaction.setProjectCodeId(projectCodeMstr.getId());
								}				
																								
								if (row.getCell(csatDueDateCellNo) != null && row.getCell(csatDueDateCellNo).getCellType() == CellType.STRING) {	
									customerSatisfaction.setCsatDueDate(row.getCell(csatDueDateCellNo).getStringCellValue().trim());
									
								}
								
								if (row.getCell(csatClientMailInitiatedCellNo) != null && row.getCell(csatClientMailInitiatedCellNo).getCellType() == CellType.STRING) {	
									customerSatisfaction.setCsatClientMailInitiated(row.getCell(csatClientMailInitiatedCellNo).getStringCellValue().trim());
								}
								
								if (row.getCell(csatReceivedDateCellNo) != null && row.getCell(csatReceivedDateCellNo).getCellType() == CellType.STRING) {	
									customerSatisfaction.setCsatReceivedDate(row.getCell(csatReceivedDateCellNo).getStringCellValue().trim());
								}																
								
								if (row.getCell(ratingCellNo) != null && row.getCell(ratingCellNo).getCellType() == CellType.NUMERIC) {	
									customerSatisfaction.setRating(row.getCell(ratingCellNo).getNumericCellValue());
								}					
								customerSatisfactionListReadFromExcel.add(customerSatisfaction);
							}//End of for loop
						});
					} catch (EncryptedDocumentException | IOException e) {
						logger.error(e.getMessage(), e);
					} finally {
						try {
							if (workbook != null)
								workbook.close();
							if (excelInputStream != null)
								excelInputStream.close();
						} catch (IOException e) {
							logger.error(e.getMessage(), e);
						}
					}
				}
				return customerSatisfactionListReadFromExcel;
	}

	@Override
	public List<CustomerSatisfaction> saveExcel(List<CustomerSatisfaction> customerSatisfactionListReadFromExcel,FileUploadPayload fileUploadPayload) throws DataIntegrityViolationException, IOException, Exception{
		
       List<CustomerSatisfaction> savedCustomerSatisfactionList = null;      
		
		FileType fileType = dataLoader.getFileTypeMap().get(fileUploadPayload.getFileTypeId());
		fileUploadPayload.setFileType(fileType.getFileType());
		String uploadedFileName = fileStorageService.storeFile(fileUploadPayload);
		try {		
		if(uploadedFileName!= null) {//Ensures that a file has been uploaded at server
			//Saving file reference
			fileUploadPayload.setFileServerPath(fileStorageService.getTargetLocation());
			FileReference fileReference = fileStorageService.saveFileReference(fileUploadPayload);
			fileUploadPayload.setFileName(uploadedFileName);			
			//Before saving new record, must update each record of the list with this file-reference-id.
			List<CustomerSatisfaction> updatedCustomerSatisfactionListReadFromExcel = updateFileReferenceOfAllRecordsInList(fileReference.getId(),customerSatisfactionListReadFromExcel);			
			//Start file movement				
				List<CustomerSatisfaction> readExistingMonthlyResourceUtilizationList = monthlyCustomerSatisfactionRepo.getAllByMonthAndYear(fileUploadPayload.getMonth(), fileUploadPayload.getYear());	
				if(readExistingMonthlyResourceUtilizationList.size()!=0) {	//Check whether file movement is required or not				
					savedCustomerSatisfactionList = moveFileFromMainToHistoryTable(readExistingMonthlyResourceUtilizationList,updatedCustomerSatisfactionListReadFromExcel);
			}//End of records availability check
			else {//When no record is found in the main table, then insert this first time uploaded excel
				savedCustomerSatisfactionList = monthlyCustomerSatisfactionRepo.saveAll(updatedCustomerSatisfactionListReadFromExcel);	
			}
		}}catch(Exception ex) {
			fileStorageService.deleteFiles(fileStorageService.getTargetLocation());//If any exception is caught then the currently created file must be deleted.
		    throw ex;
		}
		return savedCustomerSatisfactionList;
	}

	private List<CustomerSatisfaction> moveFileFromMainToHistoryTable(
			List<CustomerSatisfaction> readExistingMonthlyResourceUtilizationList,
			List<CustomerSatisfaction> updatedCustomerSatisfactionListReadFromExcel) {
		// TODO Auto-generated method stub
		return null;
	}

	private List<CustomerSatisfaction> updateFileReferenceOfAllRecordsInList(Integer id,
			List<CustomerSatisfaction> customerSatisfactionListReadFromExcel) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void generateExcel(HttpServletResponse response, String fileName) {
		
		
	}
	
}//End of MonthlyCustomerSatisfactionServiceImpl
