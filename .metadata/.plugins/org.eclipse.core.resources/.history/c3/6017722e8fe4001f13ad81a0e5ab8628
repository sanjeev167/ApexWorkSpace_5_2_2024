package com.nus.fileupload.service;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;

import com.nus.base.service.UserLoginBaseService;
import com.nus.exception.DataIntegrityViolationException;
import com.nus.fileupload.entities.ProjectMonthlyPlcc;
import com.nus.fileupload.loader.DataLoader;
import com.nus.fileupload.model.FileUploadPayload;
import com.nus.fileupload.repo.UserAccountMstrUploadRepo;
import com.nus.pvt.master.entities.ProjectCodeMstr;
import com.nus.sec.entities.ApexUser;

import jakarta.servlet.http.HttpServletResponse;

/**
 * @Author: SanjeevKumar<br>
 * @Date: 06-Feb-2025<br>
 * @Time: 6:31:12 am<br>
 * @Objective: <br>
 */
public class UserAccountMstrUploadServiceImpl extends UserLoginBaseService implements UserAccountMstrUploadService {

	private final Logger logger = LoggerFactory.getLogger(UserAccountMstrUploadServiceImpl.class);

	@Autowired
	UserAccountMstrUploadRepo userAccountMstrUploadRepo;

	@Autowired
	DataLoader dataLoader;

	@Autowired
	FileStorageService fileStorageService;
	@Autowired
	private PasswordEncoder encoder;

	@Override
	public List<ApexUser> readExcel(FileUploadPayload fileUploadPayload) throws IOException {
		
		int pmNameCellNo=0;// String => Checked	
		int empCodeCellNo =2;// String => Checked	
		int emailCellNo = 3; // String => Checked	
		
		

		List<ApexUser> apexUserList = new ArrayList<ApexUser>();
		Workbook workbook = null;
		String fileName = fileUploadPayload.getFile().getOriginalFilename();

		if (fileName.substring(fileName.length() - 5, fileName.length()).equals(".xlsx")) {
			InputStream excelInputStream = fileUploadPayload.getFile().getInputStream();
			try {
				workbook = WorkbookFactory.create(excelInputStream);
				logger.info("Number of sheets: " + workbook.getNumberOfSheets());
				workbook.forEach(sheet -> {
					logger.info("Title of sheet => " + sheet.getSheetName());					
					int index = 0;
					ApexUser apexUser;	ProjectCodeMstr projectCodeMstr;				
					for (Row row : sheet) {// Now, start reading each cell one by one in a selected row.
						if (index++ == 0)
							continue;
						apexUser = new ApexUser(fileUploadPayload.getUserTypeId(), getCurrentLoginUserId(),encoder.encode("pass"),activeC );
						
						if (row.getCell(totalRevenueAmountCellNo) != null && row.getCell(totalRevenueAmountCellNo).getCellType() == CellType.NUMERIC) {
							apexUser.setTotalRevenueAmount(row.getCell(totalRevenueAmountCellNo).getNumericCellValue());							
						}
						
						if (row.getCell(marginAmountCellNo) != null && row.getCell(marginAmountCellNo).getCellType() == CellType.NUMERIC) {
							apexUser.setMarginAmount(row.getCell(marginAmountCellNo).getNumericCellValue());
						}
						
						if (row.getCell(fteCellNo) != null && row.getCell(fteCellNo).getCellType() == CellType.NUMERIC) {
							apexUser.setFte(row.getCell(fteCellNo).getNumericCellValue());
						}
						
						if (row.getCell(projectCodeCellNo) != null && row.getCell(projectCodeCellNo).getCellType() == CellType.STRING) {
							projectCodeMstr =dataLoader.getProjectCodeMstrMap().get(row.getCell(projectCodeCellNo).getStringCellValue().trim());
							//System.out.println("Coming project code from excel = "+row.getCell(projectCodeCellNo).getStringCellValue().trim());
							
							apexUser.setProjectCodeId(projectCodeMstr.getId());
						}			
						apexUserList.add(projectMonthlyPlcc);
					}//End of for loop
				});
			} catch (EncryptedDocumentException | IOException e) {
				logger.error(e.getMessage(), e);
			} finally {
				try {
					if (workbook != null)
						workbook.close();
					if (excelInputStream != null)
						excelInputStream.close();
				} catch (IOException e) {
					logger.error(e.getMessage(), e);
				}
			}
		}
		return apexUserList;
	}

	@Override
	public List<ApexUser> saveExcel(List<ApexUser> usertAccountMstrUploadList) throws DataIntegrityViolationException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void generateExcel(HttpServletResponse response, String fileName) throws Exception {
		// TODO Auto-generated method stub

	}

}
