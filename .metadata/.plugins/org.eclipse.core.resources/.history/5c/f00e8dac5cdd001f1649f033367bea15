package com.nus.fileupload.service;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.nus.exception.DataIntegrityViolationException;
import com.nus.fileupload.entities.ConsolidatedDeliveryRisk;
import com.nus.fileupload.loader.DataLoader;
import com.nus.fileupload.model.FileUploadPayload;
import com.nus.fileupload.repo.MonthlyConsolidatedDeliveryRiskRepo;
import com.nus.pvt.master.entities.ProjectCodeMstr;

import jakarta.servlet.http.HttpServletResponse;

/**
 * @Author:SanjeevKumar<br>
 * @Date:24-Jan-2025<br>
 * @Time:10:51:10 pm<br>
 * @Objective: <br>
 */
@Service
public class MonthlyConsolidatedDeliveryRiskServiceImpl implements MonthlyConsolidatedDeliveryRiskService{
    
	private final Logger logger = LoggerFactory.getLogger(MonthlyConsolidatedDeliveryRiskServiceImpl.class);
	@Autowired 
    DataLoader dataLoader;
	
	@Autowired
	MonthlyConsolidatedDeliveryRiskRepo monthlyConsolidatedDeliveryRiskRepo;

	@Override
	public List<ConsolidatedDeliveryRisk> readExcel(FileUploadPayload fileUploadPayload) throws IOException {
		//Following cell value needs to be confirmed with team
		
		int riskTypeCellNo=13;// String		
		int sourceCellNo =14;// String
		int riskMainCategoryCellNo =15;// String
		int riskSubCategoryCellNo =16;// String
		
		int occuringProbablityCellNo =17;// String
		int impactCellNo =18;// String
		int riskPriorityNumberCellNo =19;// Double
		int riskExposureCellNo =20;// Double
		
		int responseResolutionStartegyCellNo =21;// String
		int riskOwnerCellNo = 22;// String
		int migrationPlanCellNo = 23;// String correct => mitigation
		int contigencyPlanCellNo =24;// String
		
		int riskStatusCellNo =25;// String
		int remarkCellNo =26;// String		
		int projectCodeCellNo= 1; // String

		List<ConsolidatedDeliveryRisk> consolidatedDeliveryRiskList = new ArrayList<ConsolidatedDeliveryRisk>();
		Workbook workbook = null;
		String fileName = fileUploadPayload.getFile().getOriginalFilename();

		if (fileName.substring(fileName.length() - 5, fileName.length()).equals(".xlsx")) {
			InputStream excelInputStream = fileUploadPayload.getFile().getInputStream();
			try {
				workbook = WorkbookFactory.create(excelInputStream);
				logger.info("Number of sheets: " + workbook.getNumberOfSheets());
				workbook.forEach(sheet -> {
					logger.info("Title of sheet => " + sheet.getSheetName());					
					int index = 0;
					ConsolidatedDeliveryRisk consolidatedDeliveryRisk;	ProjectCodeMstr projectCodeMstr;				
					for (Row row : sheet) {// Now, start reading each cell one by one in a selected row.
						if (index++ == 0)
							continue;
						consolidatedDeliveryRisk = new ConsolidatedDeliveryRisk(fileUploadPayload.getMonth(), fileUploadPayload.getYear(), fileUploadPayload.getUserId(),"Y" );
												
						if (row.getCell(riskTypeCellNo) != null && row.getCell(riskTypeCellNo).getCellType() == CellType.STRING) {
							consolidatedDeliveryRisk.setRiskType(row.getCell(riskTypeCellNo).getStringCellValue());							
						}
						
						if (row.getCell(sourceCellNo) != null && row.getCell(sourceCellNo).getCellType() == CellType.STRING) {
							consolidatedDeliveryRisk.setSource(row.getCell(sourceCellNo).getStringCellValue());							
						}
						
						if (row.getCell(riskMainCategoryCellNo) != null && row.getCell(riskMainCategoryCellNo).getCellType() == CellType.STRING) {
							consolidatedDeliveryRisk.setRiskMainCategory(row.getCell(riskMainCategoryCellNo).getStringCellValue());							
						}
						
						if (row.getCell(riskSubCategoryCellNo) != null && row.getCell(riskSubCategoryCellNo).getCellType() == CellType.STRING) {
							consolidatedDeliveryRisk.setRiskSubCategory(row.getCell(riskSubCategoryCellNo).getStringCellValue());							
						}
						
						if (row.getCell(occuringProbablityCellNo) != null && row.getCell(occuringProbablityCellNo).getCellType() == CellType.STRING) {
							consolidatedDeliveryRisk.setOccuringProbablity(row.getCell(occuringProbablityCellNo).getStringCellValue());							
						}
						
						if (row.getCell(impactCellNo) != null && row.getCell(impactCellNo).getCellType() == CellType.STRING) {
							consolidatedDeliveryRisk.setImpact(row.getCell(impactCellNo).getStringCellValue());							
						}
						
						if (row.getCell(riskPriorityNumberCellNo) != null && row.getCell(riskPriorityNumberCellNo).getCellType() == CellType.NUMERIC) {
							consolidatedDeliveryRisk.setRiskPriorityNumber(row.getCell(impactCellNo).getNumericCellValue());							
						}
						
						if (row.getCell(riskExposureCellNo) != null && row.getCell(riskExposureCellNo).getCellType() == CellType.NUMERIC) {
							consolidatedDeliveryRisk.setRiskExposure(row.getCell(riskExposureCellNo).getNumericCellValue());							
						}
						
						if (row.getCell(responseResolutionStartegyCellNo) != null && row.getCell(responseResolutionStartegyCellNo).getCellType() == CellType.STRING) {
							consolidatedDeliveryRisk.setResponseResolutionStartegy(row.getCell(responseResolutionStartegyCellNo).getStringCellValue());							
						}
						
						if (row.getCell(riskOwnerCellNo) != null && row.getCell(riskOwnerCellNo).getCellType() == CellType.STRING) {
							consolidatedDeliveryRisk.setRiskOwner(row.getCell(riskOwnerCellNo).getStringCellValue());							
						}
						
						if (row.getCell(migrationPlanCellNo) != null && row.getCell(migrationPlanCellNo).getCellType() == CellType.STRING) {
							consolidatedDeliveryRisk.setMigrationPlan(row.getCell(migrationPlanCellNo).getStringCellValue());							
						}
						if (row.getCell(contigencyPlanCellNo) != null && row.getCell(contigencyPlanCellNo).getCellType() == CellType.STRING) {
							consolidatedDeliveryRisk.setContigencyPlan(row.getCell(contigencyPlanCellNo).getStringCellValue());							
						}
						if (row.getCell(riskStatusCellNo) != null && row.getCell(riskStatusCellNo).getCellType() == CellType.STRING) {
							consolidatedDeliveryRisk.setRiskStatus(row.getCell(riskStatusCellNo).getStringCellValue());							
						}
						if (row.getCell(remarkCellNo) != null && row.getCell(remarkCellNo).getCellType() == CellType.STRING) {
							consolidatedDeliveryRisk.setRemark(row.getCell(remarkCellNo).getStringCellValue());							
						}
						
						if (row.getCell(remarkCellNo) != null && row.getCell(remarkCellNo).getCellType() == CellType.STRING) {
							consolidatedDeliveryRisk.setRemark(row.getCell(remarkCellNo).getStringCellValue());							
						}						
						if (row.getCell(projectCodeCellNo) != null && row.getCell(projectCodeCellNo).getCellType() == CellType.STRING) {
							projectCodeMstr =dataLoader.getProjectCodeMstrMap().get(row.getCell(projectCodeCellNo).getStringCellValue());							
							consolidatedDeliveryRisk.setProjectCodeId(projectCodeMstr.getId());							
						}
						consolidatedDeliveryRiskList.add(consolidatedDeliveryRisk);
					}//End of for loop
				});
			} catch (EncryptedDocumentException | IOException e) {
				logger.error(e.getMessage(), e);
			} finally {
				try {
					if (workbook != null)
						workbook.close();
					if (excelInputStream != null)
						excelInputStream.close();
				} catch (IOException e) {
					logger.error(e.getMessage(), e);
				}
			}
		}
		return consolidatedDeliveryRiskList;
	}

	@Override
	public List<ConsolidatedDeliveryRisk> saveExcel(List<ConsolidatedDeliveryRisk> consolidatedDeliveryRiskList)throws DataIntegrityViolationException {
		List<ConsolidatedDeliveryRisk> savedConsolidatedDeliveryRiskList = null;
		
			savedConsolidatedDeliveryRiskList = monthlyConsolidatedDeliveryRiskRepo.saveAll(consolidatedDeliveryRiskList);

		return savedConsolidatedDeliveryRiskList;
	}

	@Override
	public void generateExcel(HttpServletResponse response, String fileName) {
		// TODO Auto-generated method stub
		
	}
	
	
}//End of MonthlyConsolidatedDeliveryRiskServiceImpl
