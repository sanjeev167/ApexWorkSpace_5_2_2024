package com.nus.fileupload.service;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.nus.exception.DataIntegrityViolationException;
import com.nus.fileupload.entities.ProjectMonthlyRrrr;
import com.nus.fileupload.loader.DataLoader;
import com.nus.fileupload.model.FileUploadPayload;
import com.nus.fileupload.repo.MonthlyRRRRepo;
import com.nus.pvt.master.entities.ProjectCodeMstr;

import jakarta.servlet.http.HttpServletResponse;

/**
 * @Author:SanjeevKumar<br>
 * @Date:24-Jan-2025<br>
 * @Time:10:42:34 pm<br>
 * @Objective: <br>
 */
@Service
public class MonthlyRRRServiceImpl implements MonthlyRRRService{
	private final Logger logger = LoggerFactory.getLogger(MonthlyRRRServiceImpl.class);
	
	@Autowired
	MonthlyRRRRepo monthlyRRRRepo;
	
	@Autowired 
    DataLoader dataLoader;

	@Override
	public List<ProjectMonthlyRrrr> readExcel(FileUploadPayload fileUploadPayload) throws IOException {
		
		int expectedRateCellNo = 5;// Double		
		int projectCodeCellNo = 3; // String => checked

		List<ProjectMonthlyRrrr> projectMonthlyRrrrList = new ArrayList<ProjectMonthlyRrrr>();
		Workbook workbook = null;
		String fileName = fileUploadPayload.getFile().getOriginalFilename();

		if (fileName.substring(fileName.length() - 5, fileName.length()).equals(".xlsx")) {
			InputStream excelInputStream = fileUploadPayload.getFile().getInputStream();
			try {
				workbook = WorkbookFactory.create(excelInputStream);
				logger.info("Number of sheets: " + workbook.getNumberOfSheets());
				workbook.forEach(sheet -> {
					logger.info("Title of sheet => " + sheet.getSheetName());					
					int index = 0;
					ProjectMonthlyRrrr projectMonthlyRrrr;	ProjectCodeMstr projectCodeMstr;				
					for (Row row : sheet) {// Now, start reading each cell one by one in a selected row.
						if (index++ == 0)
							continue;
						projectMonthlyRrrr = new ProjectMonthlyRrrr(fileUploadPayload.getMonth(), fileUploadPayload.getYear(), fileUploadPayload.getUserId(),"Y" );
						
						if (row.getCell(expectedRateCellNo) != null && row.getCell(expectedRateCellNo).getCellType() == CellType.NUMERIC) {
							projectMonthlyRrrr.setExpectedRate(row.getCell(expectedRateCellNo).getNumericCellValue());							
						}
												
						if (row.getCell(projectCodeCellNo) != null && row.getCell(projectCodeCellNo).getCellType() == CellType.STRING) {
							projectCodeMstr =dataLoader.getProjectCodeMstrMap().get(row.getCell(projectCodeCellNo).getStringCellValue());							
							projectMonthlyRrrr.setProjectCodeId(projectCodeMstr.getId());
						}
						projectMonthlyRrrrList.add(projectMonthlyRrrr);
					}//End of for loop
				});
			} catch (EncryptedDocumentException | IOException e) {
				logger.error(e.getMessage(), e);
			} finally {
				try {
					if (workbook != null)
						workbook.close();
					if (excelInputStream != null)
						excelInputStream.close();
				} catch (IOException e) {
					logger.error(e.getMessage(), e);
				}
			}
		}
		return projectMonthlyRrrrList;
	}

	@Override
	public List<ProjectMonthlyRrrr>  saveExcel(List<ProjectMonthlyRrrr> projectMonthlyRrrrList) throws DataIntegrityViolationException{
		List<ProjectMonthlyRrrr> savedProjectMonthlyRrrrList = null;
		
			savedProjectMonthlyRrrrList = monthlyRRRRepo.saveAll(projectMonthlyRrrrList);
	
		return savedProjectMonthlyRrrrList;
	}

	@Override
	public void generateExcel(HttpServletResponse response, String fileName) {
		// TODO Auto-generated method stub
		
	}

	
}//End of MonthlyRRRService
