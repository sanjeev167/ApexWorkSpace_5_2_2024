package com.nus.sec.service;

import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.nus.base.service.UserLoginBaseService;
import com.nus.sec.entities.ApexUserGroup;
import com.nus.sec.model.ApexUserGroupModel;
import com.nus.sec.repo.ApexUserGroupRepository;

/**
 * @Author: SanjeevKumar<br>
 * @Date: 13-Jan-2025<br>
 * @Time: 10:06:43 pm<br>
 * @Objective: <br>
 */
@Service
public class ApexUserGroupServiceImpl extends UserLoginBaseService implements ApexUserGroupService {

	@Autowired
	ApexUserGroupRepository apexUserGroupRepository;

	@Override
	public ApexUserGroup addApexUserGroup(ApexUserGroupModel apexUserGroupModel) {
		ApexUserGroup savedApexUserGroupEntity = null;
		try {
			ApexUserGroup apexUserGroupEntity = new ApexUserGroup();
			apexUserGroupEntity.setApexUserId(apexUserGroupModel.getApexUserId());
			apexUserGroupEntity.setApexGroupId(apexUserGroupModel.getApexGroupId());
			apexUserGroupEntity.setCreatedOn(new Date());
			// apexUserGroupEntity.setCreatedBy(0);//Will be implemented latter. FK needs to
			// be adjusted
			apexUserGroupEntity.setActiveC("Y");
			savedApexUserGroupEntity = apexUserGroupRepository.save(apexUserGroupEntity);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return savedApexUserGroupEntity;

	}

	@Override
	public ApexUserGroup updateApexUserGroup(ApexUserGroupModel apexUserGroupModel) {
		ApexUserGroup apexUserGroupEntityToBeUpdated = null;
		try {
			Optional<ApexUserGroup> apexUserGroupEntityWrapper = apexUserGroupRepository
					.findById(apexUserGroupModel.getId());
			if (apexUserGroupEntityWrapper.isPresent()) {
				apexUserGroupEntityToBeUpdated = apexUserGroupEntityWrapper.get();
				apexUserGroupEntityToBeUpdated.setApexUserId(apexUserGroupModel.getApexUserId());
				apexUserGroupEntityToBeUpdated.setApexGroupId(apexUserGroupModel.getApexGroupId());
				apexUserGroupEntityToBeUpdated.setModifiedOn(new Date());
				// apexUserGroupEntityToBeUpdated.setModifiedBy(0);//Will be implemented latter.
				// FK needs to be adjusted
				apexUserGroupEntityToBeUpdated.setActiveC(apexUserGroupModel.getActiveC());
				apexUserGroupRepository.save(apexUserGroupEntityToBeUpdated);
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return apexUserGroupEntityToBeUpdated;
	}

	@Override
	public boolean deleteApexUserGroupByRecordId(Integer recordId) {
		boolean isRecordDeleted = true;
		try {
			apexUserGroupRepository.deleteById(recordId);
		} catch (Exception ex) {
			ex.printStackTrace();
			isRecordDeleted = false;
		}
		return isRecordDeleted;
	}

	@Override
	public ApexUserGroup getApexUserGroupByRecordId(Integer recordId) {
		ApexUserGroup apexUserGroupEntityFetched = null;
		try {
			Optional<ApexUserGroup> apiUserGroupEntityWrapper = apexUserGroupRepository.findById(recordId);
			if (apiUserGroupEntityWrapper.isPresent())
				apexUserGroupEntityFetched = apiUserGroupEntityWrapper.get();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return apexUserGroupEntityFetched;

	}

	@Override
	public List<ApexUserGroup> getAllApexUserGroups() {
		List<ApexUserGroup> apexUserGroupList = null;
		try {
			apexUserGroupList = apexUserGroupRepository.findAll();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		return apexUserGroupList;

	}

}// End of ApexUserGroupServiceImpl
